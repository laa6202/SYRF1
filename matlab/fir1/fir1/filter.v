// -------------------------------------------------------------
//
// Module: filter
//
// Generated by MATLAB(R) 7.0 and the Filter Design HDL Coder 1.0.
//
// Generated on: 2018-06-28 21:28:19
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// TargetDirectory: fir1
// FIRAdderStyle: tree
// AddPipelineRegisters: On
// ResetAssertedLevel: Active-Low
// InlineConfigurations: Off
// SafeZeroConcat: Off
// TestBenchStimulus: impulse step ramp chirp noise 
// ResetValue: Active-Low
//
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Order      : 25
// Stable            : Yes
// Linear Phase      : Yes (Type 2)
// Arithmetic        : fixed
//
//          CoeffWordLength: 16
//           CoeffAutoScale: true
//                   Signed: true
//
//          InputWordLength: 16
//          InputFracLength: 15
//
//         OutputWordLength: 16
//               OutputMode: 'AvoidOverflow'
//
//              ProductMode: 'FullPrecision'
//
//                AccumMode: 'KeepMSB'
//          AccumWordLength: 40
//            CastBeforeSum: true
//
//                RoundMode: 'convergent'
//             OverflowMode: 'wrap'
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module filter (clk, clk_enable, reset, filter_in, filter_out );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [15:0] filter_out; //sfix16_En10

  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000000000111100; //sfix16_En16
  parameter signed [15:0] coeff2 = 16'b0000000011011100; //sfix16_En16
  parameter signed [15:0] coeff3 = 16'b0000000110110101; //sfix16_En16
  parameter signed [15:0] coeff4 = 16'b0000000111101111; //sfix16_En16
  parameter signed [15:0] coeff5 = 16'b0000000001000100; //sfix16_En16
  parameter signed [15:0] coeff6 = 16'b1111110000001010; //sfix16_En16
  parameter signed [15:0] coeff7 = 16'b1111011010001010; //sfix16_En16
  parameter signed [15:0] coeff8 = 16'b1111001101110101; //sfix16_En16
  parameter signed [15:0] coeff9 = 16'b1111011101111100; //sfix16_En16
  parameter signed [15:0] coeff10 = 16'b0000010101011001; //sfix16_En16
  parameter signed [15:0] coeff11 = 16'b0001101100010100; //sfix16_En16
  parameter signed [15:0] coeff12 = 16'b0011000110101111; //sfix16_En16
  parameter signed [15:0] coeff13 = 16'b0100000000100100; //sfix16_En16
  parameter signed [15:0] coeff14 = 16'b0100000000100100; //sfix16_En16
  parameter signed [15:0] coeff15 = 16'b0011000110101111; //sfix16_En16
  parameter signed [15:0] coeff16 = 16'b0001101100010100; //sfix16_En16
  parameter signed [15:0] coeff17 = 16'b0000010101011001; //sfix16_En16
  parameter signed [15:0] coeff18 = 16'b1111011101111100; //sfix16_En16
  parameter signed [15:0] coeff19 = 16'b1111001101110101; //sfix16_En16
  parameter signed [15:0] coeff20 = 16'b1111011010001010; //sfix16_En16
  parameter signed [15:0] coeff21 = 16'b1111110000001010; //sfix16_En16
  parameter signed [15:0] coeff22 = 16'b0000000001000100; //sfix16_En16
  parameter signed [15:0] coeff23 = 16'b0000000111101111; //sfix16_En16
  parameter signed [15:0] coeff24 = 16'b0000000110110101; //sfix16_En16
  parameter signed [15:0] coeff25 = 16'b0000000011011100; //sfix16_En16
  parameter signed [15:0] coeff26 = 16'b0000000000111100; //sfix16_En16

  // Signals
  reg  signed [15:0] delay_pipeline [0:25] ; // sfix16_En15
  wire signed [31:0] product26; // sfix32_En31
  wire signed [31:0] product25; // sfix32_En31
  wire signed [31:0] product24; // sfix32_En31
  wire signed [31:0] product23; // sfix32_En31
  wire signed [31:0] product22; // sfix32_En31
  wire signed [31:0] product21; // sfix32_En31
  wire signed [31:0] product20; // sfix32_En31
  wire signed [31:0] product19; // sfix32_En31
  wire signed [31:0] product18; // sfix32_En31
  wire signed [31:0] product17; // sfix32_En31
  wire signed [31:0] product16; // sfix32_En31
  wire signed [31:0] product15; // sfix32_En31
  wire signed [31:0] product14; // sfix32_En31
  wire signed [31:0] product13; // sfix32_En31
  wire signed [31:0] product12; // sfix32_En31
  wire signed [31:0] product11; // sfix32_En31
  wire signed [31:0] product10; // sfix32_En31
  wire signed [31:0] product9; // sfix32_En31
  wire signed [31:0] product8; // sfix32_En31
  wire signed [31:0] product7; // sfix32_En31
  wire signed [31:0] product6; // sfix32_En31
  wire signed [31:0] product5; // sfix32_En31
  wire signed [31:0] product4; // sfix32_En31
  wire signed [31:0] product3; // sfix32_En31
  wire signed [31:0] product2; // sfix32_En31
  wire signed [31:0] product1; // sfix32_En31
  wire signed [39:0] sumvector1 [0:12] ; // sfix40_En31
  wire signed [31:0] add_signext; // sfix32_En31
  wire signed [31:0] add_signext_1; // sfix32_En31
  wire signed [32:0] add_temp; // sfix33_En31
  wire signed [31:0] add_signext_2; // sfix32_En31
  wire signed [31:0] add_signext_3; // sfix32_En31
  wire signed [32:0] add_temp_1; // sfix33_En31
  wire signed [31:0] add_signext_4; // sfix32_En31
  wire signed [31:0] add_signext_5; // sfix32_En31
  wire signed [32:0] add_temp_2; // sfix33_En31
  wire signed [31:0] add_signext_6; // sfix32_En31
  wire signed [31:0] add_signext_7; // sfix32_En31
  wire signed [32:0] add_temp_3; // sfix33_En31
  wire signed [31:0] add_signext_8; // sfix32_En31
  wire signed [31:0] add_signext_9; // sfix32_En31
  wire signed [32:0] add_temp_4; // sfix33_En31
  wire signed [31:0] add_signext_10; // sfix32_En31
  wire signed [31:0] add_signext_11; // sfix32_En31
  wire signed [32:0] add_temp_5; // sfix33_En31
  wire signed [31:0] add_signext_12; // sfix32_En31
  wire signed [31:0] add_signext_13; // sfix32_En31
  wire signed [32:0] add_temp_6; // sfix33_En31
  wire signed [31:0] add_signext_14; // sfix32_En31
  wire signed [31:0] add_signext_15; // sfix32_En31
  wire signed [32:0] add_temp_7; // sfix33_En31
  wire signed [31:0] add_signext_16; // sfix32_En31
  wire signed [31:0] add_signext_17; // sfix32_En31
  wire signed [32:0] add_temp_8; // sfix33_En31
  wire signed [31:0] add_signext_18; // sfix32_En31
  wire signed [31:0] add_signext_19; // sfix32_En31
  wire signed [32:0] add_temp_9; // sfix33_En31
  wire signed [31:0] add_signext_20; // sfix32_En31
  wire signed [31:0] add_signext_21; // sfix32_En31
  wire signed [32:0] add_temp_10; // sfix33_En31
  wire signed [31:0] add_signext_22; // sfix32_En31
  wire signed [31:0] add_signext_23; // sfix32_En31
  wire signed [32:0] add_temp_11; // sfix33_En31
  wire signed [31:0] add_signext_24; // sfix32_En31
  wire signed [31:0] add_signext_25; // sfix32_En31
  wire signed [32:0] add_temp_12; // sfix33_En31
  reg  signed [39:0] sumdelay_pipeline1 [0:12] ; // sfix40_En31
  wire signed [39:0] sumvector2 [0:6] ; // sfix40_En31
  wire signed [39:0] add_signext_26; // sfix40_En31
  wire signed [39:0] add_signext_27; // sfix40_En31
  wire signed [40:0] add_temp_13; // sfix41_En31
  wire signed [39:0] add_signext_28; // sfix40_En31
  wire signed [39:0] add_signext_29; // sfix40_En31
  wire signed [40:0] add_temp_14; // sfix41_En31
  wire signed [39:0] add_signext_30; // sfix40_En31
  wire signed [39:0] add_signext_31; // sfix40_En31
  wire signed [40:0] add_temp_15; // sfix41_En31
  wire signed [39:0] add_signext_32; // sfix40_En31
  wire signed [39:0] add_signext_33; // sfix40_En31
  wire signed [40:0] add_temp_16; // sfix41_En31
  wire signed [39:0] add_signext_34; // sfix40_En31
  wire signed [39:0] add_signext_35; // sfix40_En31
  wire signed [40:0] add_temp_17; // sfix41_En31
  wire signed [39:0] add_signext_36; // sfix40_En31
  wire signed [39:0] add_signext_37; // sfix40_En31
  wire signed [40:0] add_temp_18; // sfix41_En31
  reg  signed [39:0] sumdelay_pipeline2 [0:6] ; // sfix40_En31
  wire signed [39:0] sumvector3 [0:3] ; // sfix40_En31
  wire signed [39:0] add_signext_38; // sfix40_En31
  wire signed [39:0] add_signext_39; // sfix40_En31
  wire signed [40:0] add_temp_19; // sfix41_En31
  wire signed [39:0] add_signext_40; // sfix40_En31
  wire signed [39:0] add_signext_41; // sfix40_En31
  wire signed [40:0] add_temp_20; // sfix41_En31
  wire signed [39:0] add_signext_42; // sfix40_En31
  wire signed [39:0] add_signext_43; // sfix40_En31
  wire signed [40:0] add_temp_21; // sfix41_En31
  reg  signed [39:0] sumdelay_pipeline3 [0:3] ; // sfix40_En31
  wire signed [39:0] sumvector4 [0:1] ; // sfix40_En31
  wire signed [39:0] add_signext_44; // sfix40_En31
  wire signed [39:0] add_signext_45; // sfix40_En31
  wire signed [40:0] add_temp_22; // sfix41_En31
  wire signed [39:0] add_signext_46; // sfix40_En31
  wire signed [39:0] add_signext_47; // sfix40_En31
  wire signed [40:0] add_temp_23; // sfix41_En31
  reg  signed [39:0] sumdelay_pipeline4 [0:1] ; // sfix40_En31
  wire signed [39:0] sum5; // sfix40_En31
  wire signed [39:0] add_signext_48; // sfix40_En31
  wire signed [39:0] add_signext_49; // sfix40_En31
  wire signed [40:0] add_temp_24; // sfix41_En31
  wire signed [15:0] output_typeconvert; // sfix16_En10
  reg  signed [15:0] output_register; // sfix16_En10

  // Block Statements
  always @( posedge clk or negedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b0) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
        end
      end
    end // Delay_Pipeline_process

  assign product26 = delay_pipeline[25] * coeff26;

  assign product25 = delay_pipeline[24] * coeff25;

  assign product24 = delay_pipeline[23] * coeff24;

  assign product23 = delay_pipeline[22] * coeff23;

  assign product22 = delay_pipeline[21] * coeff22;

  assign product21 = delay_pipeline[20] * coeff21;

  assign product20 = delay_pipeline[19] * coeff20;

  assign product19 = delay_pipeline[18] * coeff19;

  assign product18 = delay_pipeline[17] * coeff18;

  assign product17 = delay_pipeline[16] * coeff17;

  assign product16 = delay_pipeline[15] * coeff16;

  assign product15 = delay_pipeline[14] * coeff15;

  assign product14 = delay_pipeline[13] * coeff14;

  assign product13 = delay_pipeline[12] * coeff13;

  assign product12 = delay_pipeline[11] * coeff12;

  assign product11 = delay_pipeline[10] * coeff11;

  assign product10 = delay_pipeline[9] * coeff10;

  assign product9 = delay_pipeline[8] * coeff9;

  assign product8 = delay_pipeline[7] * coeff8;

  assign product7 = delay_pipeline[6] * coeff7;

  assign product6 = delay_pipeline[5] * coeff6;

  assign product5 = delay_pipeline[4] * coeff5;

  assign product4 = delay_pipeline[3] * coeff4;

  assign product3 = delay_pipeline[2] * coeff3;

  assign product2 = delay_pipeline[1] * coeff2;

  assign product1 = delay_pipeline[0] * coeff1;

  assign add_signext = product26;
  assign add_signext_1 = product25;
  assign add_temp = add_signext + add_signext_1;
  assign sumvector1[0] = $signed({{7{add_temp[32]}}, add_temp});

  assign add_signext_2 = product24;
  assign add_signext_3 = product23;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sumvector1[1] = $signed({{7{add_temp_1[32]}}, add_temp_1});

  assign add_signext_4 = product22;
  assign add_signext_5 = product21;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sumvector1[2] = $signed({{7{add_temp_2[32]}}, add_temp_2});

  assign add_signext_6 = product20;
  assign add_signext_7 = product19;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sumvector1[3] = $signed({{7{add_temp_3[32]}}, add_temp_3});

  assign add_signext_8 = product18;
  assign add_signext_9 = product17;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sumvector1[4] = $signed({{7{add_temp_4[32]}}, add_temp_4});

  assign add_signext_10 = product16;
  assign add_signext_11 = product15;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sumvector1[5] = $signed({{7{add_temp_5[32]}}, add_temp_5});

  assign add_signext_12 = product14;
  assign add_signext_13 = product13;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sumvector1[6] = $signed({{7{add_temp_6[32]}}, add_temp_6});

  assign add_signext_14 = product12;
  assign add_signext_15 = product11;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sumvector1[7] = $signed({{7{add_temp_7[32]}}, add_temp_7});

  assign add_signext_16 = product10;
  assign add_signext_17 = product9;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sumvector1[8] = $signed({{7{add_temp_8[32]}}, add_temp_8});

  assign add_signext_18 = product8;
  assign add_signext_19 = product7;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sumvector1[9] = $signed({{7{add_temp_9[32]}}, add_temp_9});

  assign add_signext_20 = product6;
  assign add_signext_21 = product5;
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sumvector1[10] = $signed({{7{add_temp_10[32]}}, add_temp_10});

  assign add_signext_22 = product4;
  assign add_signext_23 = product3;
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sumvector1[11] = $signed({{7{add_temp_11[32]}}, add_temp_11});

  assign add_signext_24 = product2;
  assign add_signext_25 = product1;
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sumvector1[12] = $signed({{7{add_temp_12[32]}}, add_temp_12});

  always @ (posedge clk or negedge reset)
    begin: sumdelay_pipeline_process1
      if (reset == 1'b0) begin
        sumdelay_pipeline1[0] <= 0;
        sumdelay_pipeline1[1] <= 0;
        sumdelay_pipeline1[2] <= 0;
        sumdelay_pipeline1[3] <= 0;
        sumdelay_pipeline1[4] <= 0;
        sumdelay_pipeline1[5] <= 0;
        sumdelay_pipeline1[6] <= 0;
        sumdelay_pipeline1[7] <= 0;
        sumdelay_pipeline1[8] <= 0;
        sumdelay_pipeline1[9] <= 0;
        sumdelay_pipeline1[10] <= 0;
        sumdelay_pipeline1[11] <= 0;
        sumdelay_pipeline1[12] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumdelay_pipeline1[0] <= sumvector1[0];
          sumdelay_pipeline1[1] <= sumvector1[1];
          sumdelay_pipeline1[2] <= sumvector1[2];
          sumdelay_pipeline1[3] <= sumvector1[3];
          sumdelay_pipeline1[4] <= sumvector1[4];
          sumdelay_pipeline1[5] <= sumvector1[5];
          sumdelay_pipeline1[6] <= sumvector1[6];
          sumdelay_pipeline1[7] <= sumvector1[7];
          sumdelay_pipeline1[8] <= sumvector1[8];
          sumdelay_pipeline1[9] <= sumvector1[9];
          sumdelay_pipeline1[10] <= sumvector1[10];
          sumdelay_pipeline1[11] <= sumvector1[11];
          sumdelay_pipeline1[12] <= sumvector1[12];
        end
      end
    end // sumdelay_pipeline_process1

  assign add_signext_26 = sumdelay_pipeline1[0];
  assign add_signext_27 = sumdelay_pipeline1[1];
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sumvector2[0] = add_temp_13[39:0];

  assign add_signext_28 = sumdelay_pipeline1[2];
  assign add_signext_29 = sumdelay_pipeline1[3];
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sumvector2[1] = add_temp_14[39:0];

  assign add_signext_30 = sumdelay_pipeline1[4];
  assign add_signext_31 = sumdelay_pipeline1[5];
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sumvector2[2] = add_temp_15[39:0];

  assign add_signext_32 = sumdelay_pipeline1[6];
  assign add_signext_33 = sumdelay_pipeline1[7];
  assign add_temp_16 = add_signext_32 + add_signext_33;
  assign sumvector2[3] = add_temp_16[39:0];

  assign add_signext_34 = sumdelay_pipeline1[8];
  assign add_signext_35 = sumdelay_pipeline1[9];
  assign add_temp_17 = add_signext_34 + add_signext_35;
  assign sumvector2[4] = add_temp_17[39:0];

  assign add_signext_36 = sumdelay_pipeline1[10];
  assign add_signext_37 = sumdelay_pipeline1[11];
  assign add_temp_18 = add_signext_36 + add_signext_37;
  assign sumvector2[5] = add_temp_18[39:0];

  assign sumvector2[6] = sumdelay_pipeline1[12];

  always @ (posedge clk or negedge reset)
    begin: sumdelay_pipeline_process2
      if (reset == 1'b0) begin
        sumdelay_pipeline2[0] <= 0;
        sumdelay_pipeline2[1] <= 0;
        sumdelay_pipeline2[2] <= 0;
        sumdelay_pipeline2[3] <= 0;
        sumdelay_pipeline2[4] <= 0;
        sumdelay_pipeline2[5] <= 0;
        sumdelay_pipeline2[6] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumdelay_pipeline2[0] <= sumvector2[0];
          sumdelay_pipeline2[1] <= sumvector2[1];
          sumdelay_pipeline2[2] <= sumvector2[2];
          sumdelay_pipeline2[3] <= sumvector2[3];
          sumdelay_pipeline2[4] <= sumvector2[4];
          sumdelay_pipeline2[5] <= sumvector2[5];
          sumdelay_pipeline2[6] <= sumvector2[6];
        end
      end
    end // sumdelay_pipeline_process2

  assign add_signext_38 = sumdelay_pipeline2[0];
  assign add_signext_39 = sumdelay_pipeline2[1];
  assign add_temp_19 = add_signext_38 + add_signext_39;
  assign sumvector3[0] = add_temp_19[39:0];

  assign add_signext_40 = sumdelay_pipeline2[2];
  assign add_signext_41 = sumdelay_pipeline2[3];
  assign add_temp_20 = add_signext_40 + add_signext_41;
  assign sumvector3[1] = add_temp_20[39:0];

  assign add_signext_42 = sumdelay_pipeline2[4];
  assign add_signext_43 = sumdelay_pipeline2[5];
  assign add_temp_21 = add_signext_42 + add_signext_43;
  assign sumvector3[2] = add_temp_21[39:0];

  assign sumvector3[3] = sumdelay_pipeline2[6];

  always @ (posedge clk or negedge reset)
    begin: sumdelay_pipeline_process3
      if (reset == 1'b0) begin
        sumdelay_pipeline3[0] <= 0;
        sumdelay_pipeline3[1] <= 0;
        sumdelay_pipeline3[2] <= 0;
        sumdelay_pipeline3[3] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumdelay_pipeline3[0] <= sumvector3[0];
          sumdelay_pipeline3[1] <= sumvector3[1];
          sumdelay_pipeline3[2] <= sumvector3[2];
          sumdelay_pipeline3[3] <= sumvector3[3];
        end
      end
    end // sumdelay_pipeline_process3

  assign add_signext_44 = sumdelay_pipeline3[0];
  assign add_signext_45 = sumdelay_pipeline3[1];
  assign add_temp_22 = add_signext_44 + add_signext_45;
  assign sumvector4[0] = add_temp_22[39:0];

  assign add_signext_46 = sumdelay_pipeline3[2];
  assign add_signext_47 = sumdelay_pipeline3[3];
  assign add_temp_23 = add_signext_46 + add_signext_47;
  assign sumvector4[1] = add_temp_23[39:0];

  always @ (posedge clk or negedge reset)
    begin: sumdelay_pipeline_process4
      if (reset == 1'b0) begin
        sumdelay_pipeline4[0] <= 0;
        sumdelay_pipeline4[1] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumdelay_pipeline4[0] <= sumvector4[0];
          sumdelay_pipeline4[1] <= sumvector4[1];
        end
      end
    end // sumdelay_pipeline_process4

  assign add_signext_48 = sumdelay_pipeline4[0];
  assign add_signext_49 = sumdelay_pipeline4[1];
  assign add_temp_24 = add_signext_48 + add_signext_49;
  assign sum5 = add_temp_24[39:0];

  assign output_typeconvert = (sum5[36:0] + {sum5[21], {20{~sum5[21]}}})>>>21;

  always @ (posedge clk or negedge reset)
    begin: Output_Register_process
      if (reset == 1'b0) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;

endmodule  // filter
